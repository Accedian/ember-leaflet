<h1 class="doc-page-title">Actions and interaction</h1>

<p>
  Often you will need to capture interaction on your map. Ember-leaflet sends
  actions based on the corresponding leaflet events (and there are a lot of them!). Ember-leaflet
  embraces DDAU <em>(Data Down Actions Up)</em> philosophy of Ember 2.0 so data flow
  is always unidirectional and explicit.
</p>

<p>
  In other words, if you want to change the map state, just change the data you provide
  to ember-leaflet components. However, when a certain state is changed by a component
  (say, the map's center coordinates), ember-leaflet won't update your data. Instead
  you can use an action to update the data yourself. Maximum flexibility.
</p>

{{#code-sample as |component|}}
  {{#code-block language="handlebars" class=(concat "code-sample-snippet " (if (eq component.activeTab "template") "active"))}}
&lt;p&gt;Latitude: &lt;code&gt;\{{lat}}&lt;/code&gt; / Longitude: &lt;code&gt;\{{lng}}&lt;/code&gt;&lt;/p&gt;
\{{#leaflet-map lat=lat lng=lng zoom=zoom onMoveend=(action "updateCenter")}}
  \{{tile-layer url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png"}}
\{{/leaflet-map}}{{/code-block}}
  {{#code-block language="javascript" class=(concat "code-sample-snippet " (if (eq component.activeTab "javascript") "active"))}}
export default Ember.Controller.extend({
  lat: 45.519743,
  lng: -122.680522,
  zoom: 10,
  actions: {
    updateCenter(e) {
      let center = e.target.getCenter();
      this.set('lat', center.lat);
      this.set('lng', center.lng);
    }
  }
});{{/code-block}}
  <div class="code-sample-snippet result {{if (eq component.activeTab "result") "active"}}">
    <p>Latitude: {{input value=lat}} / Longitude: {{input value=lng}}</p>
    {{#leaflet-map lat=lat lng=lng zoom=zoom onMoveend=(action "updateCenter")}}
      {{tile-layer url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png"}}
    {{/leaflet-map}}
  </div>
{{/code-sample}}

<p>
  Here we used the action <code>onMoveend</code> that triggers when the map stops to move.
  In this action we update our controller variables which are bound the the inputs. Notice how
  when you change the inputs, the map changes its state! This gives us the flexibility to
  do whatever we need when the user interacts with the map.
</p>

<p>
  Currently, <strong>all actions get the leaflet raw event passed in</strong>.
</p>

<div class="doc-page-nav">
  {{#link-to "docs.adding-layers" class="doc-page-nav-link-prev"}}&lt; Adding layers{{/link-to}}
  {{#link-to "docs.templates" class="doc-page-nav-link-next"}}They're just templates! &gt;{{/link-to}}
</div>
